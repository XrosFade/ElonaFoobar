local hclua = require 'hclua'
local inspect = require 'inspect'



local function validate_prototype_name(name)
   return name:match("[a-zA-Z0-9_]+")
end



local function validate_data_name(name)
   return name:match("[a-zA-Z0-9_]+") or name:match("[a-zA-Z0-9_]+%.[a-zA-Z0-9_]")
end



local function compile(in_filename, out, is_prototype)
   hcl = hclua.parse_file(in_filename)
   if not hcl then
      error('Failed to open or parse: ' .. in_filename)
   end

   if type(hcl) ~= 'table' then
      error('Prototype and hcl files must be object(s).')
   end

   out:write([[
-- This file is automatically generated by Elona foobar.
-- DO NOT manually modify it unless you know what you are doing.

]])
   out:write("-- File " .. in_filename .. "\n")

   out:write("return {\n")
   if is_prototype then
      for k, v in pairs(hcl) do
         if not validate_prototype_name(k) then
            error("invalid prototype name: " .. k)
         end
         out:write("   ['" .. k .. "'] = ")
         out:write(inspect(v, { indent="   ", newline="\n   " }))
         out:write(",\n")
      end
   else
      for k, v in pairs(hcl) do
         if not validate_prototype_name(k) then
            error("invalid prototype name: " .. k)
         end
         out:write("   ['" .. k .. "'] = {\n")
         for k_, v_ in pairs(v) do
            if not validate_data_name(k_) then
               error("invalid extension data name: " .. k_)
            end
            out:write("      ['" .. k_ .. "'] = ")
            out:write(inspect(v_, { indent="   ", newline="\n      " }))
            out:write(",\n")
         end
         out:write("   },\n")
      end
   end
   out:write("}\n")
end



return compile
