--- Enumerations for various data types. All enum variants take the
--  name of the variant as a string for its value. This means that
--  anywhere an enum value is required, you can pass a string with its
--  name instead of using the <code>Enums</code> table.
--  @usage local Enums = Elona.require("Enums")
module "Enums"

--- A source of damage to be used with <code>LuaCharacter.damage_hp</code>.
--  @enum DamageSource
--  @tfield Enums.DamageSource Trap
--  @tfield Enums.DamageSource Overcasting
--  @tfield Enums.DamageSource Starvation
--  @tfield Enums.DamageSource Poisoning
--  @tfield Enums.DamageSource Curse
--  @tfield Enums.DamageSource BackpackWeight
--  @tfield Enums.DamageSource FallFromStairs
--  @tfield Enums.DamageSource Audience
--  @tfield Enums.DamageSource Burn
--  @tfield Enums.DamageSource Adventuring
--  @tfield Enums.DamageSource UnseenHand
--  @tfield Enums.DamageSource FoodPoisoning
--  @tfield Enums.DamageSource BloodLoss
--  @tfield Enums.DamageSource EtherDisease
--  @tfield Enums.DamageSource Acid
--  @tfield Enums.DamageSource Shatter
--  @tfield Enums.DamageSource AtomicBomb
--  @tfield Enums.DamageSource IronMaiden
--  @tfield Enums.DamageSource Guillotine
--  @tfield Enums.DamageSource Hanging
--  @tfield Enums.DamageSource Mochi
DamageSource = {}

--- A set of colors.
--  @enum ColorIndex
--  @tfield Enums.ColorIndex None
--  @tfield Enums.ColorIndex White
--  @tfield Enums.ColorIndex Green
--  @tfield Enums.ColorIndex Red
--  @tfield Enums.ColorIndex Blue
--  @tfield Enums.ColorIndex Orange
--  @tfield Enums.ColorIndex Yellow
--  @tfield Enums.ColorIndex Grey
--  @tfield Enums.ColorIndex Purple
--  @tfield Enums.ColorIndex Cyan
--  @tfield Enums.ColorIndex LightRed
--  @tfield Enums.ColorIndex Gold
--  @tfield Enums.ColorIndex White2
--  @tfield Enums.ColorIndex LightBrown
--  @tfield Enums.ColorIndex DarkGreen
--  @tfield Enums.ColorIndex LightGrey
--  @tfield Enums.ColorIndex PaleRed
--  @tfield Enums.ColorIndex LightBlue
--  @tfield Enums.ColorIndex LightPurple
--  @tfield Enums.ColorIndex LightGreen
--  @tfield Enums.ColorIndex YellowGreen
--  @tfield Enums.ColorIndex RandomFurniture
--  @tfield Enums.ColorIndex RandomSeeded
--  @tfield Enums.ColorIndex RandomAny
ColorIndex = {}

--- The curse state of an item.
--  @usage local item = Item.create(10, 10, "core.putitoro", 3)
--  item.curse_state = "Blessed"
--  @enum CurseState
--  @tfield Enums.CurseState Doomed
--  @tfield Enums.CurseState Cursed
--  @tfield Enums.CurseState None
--  @tfield Enums.CurseState Blessed
CurseState = {}

--- The identify state of an item.
--  @usage local item = Item.create(10, 10, "core.putitoro", 3)
--  item.identify_state = "Completely"
--  @enum IdentifyState
--  @tfield Enums.IdentifyState Unidentified
--  @tfield Enums.IdentifyState Partly
--  @tfield Enums.IdentifyState Almost
--  @tfield Enums.IdentifyState Completely
IdentifyState = {}

--- A status effect applicable to a character.
--  @see LuaCharacter.apply_ailment
--  @enum StatusAilment
--  @tfield Enums.StatusAilment Blinded
--  @tfield Enums.StatusAilment Confused
--  @tfield Enums.StatusAilment Paralyzed
--  @tfield Enums.StatusAilment Poisoned
--  @tfield Enums.StatusAilment Sleep
--  @tfield Enums.StatusAilment Fear
--  @tfield Enums.StatusAilment Dimmed
--  @tfield Enums.StatusAilment Bleeding
--  @tfield Enums.StatusAilment Drunk
--  @tfield Enums.StatusAilment Insane
--  @tfield Enums.StatusAilment Sick
StatusAilment = {}

--- A type of elemental damage.
--  @enum Element
--  @tfield Enums.Element Fire
--  @tfield Enums.Element Cold
--  @tfield Enums.Element Lightning
--  @tfield Enums.Element Darkness
--  @tfield Enums.Element Mind
--  @tfield Enums.Element Poison
--  @tfield Enums.Element Nether
--  @tfield Enums.Element Sound
--  @tfield Enums.Element Nerve
--  @tfield Enums.Element Chaos
--  @tfield Enums.Element Magic
--  @tfield Enums.Element Cut
--  @tfield Enums.Element Ether
--  @tfield Enums.Element Acid
Element = {}

--- A kind of tile to be used with <code>Map.generate_tile</code>.
--  @see Map.generate_tile
--  @enum TileKind
--  @tfield Enums.TileKind Normal
--  @tfield Enums.TileKind Wall
--  @tfield Enums.TileKind Tunnel
--  @tfield Enums.TileKind Room
--  @tfield Enums.TileKind Fog
TileKind = {}

--- The quality of randomly generated equipment.
--  @enum Quality
--  @tfield Enums.Quality None
--  @tfield Enums.Quality Bad
--  @tfield Enums.Quality Good
--  @tfield Enums.Quality Great
--  @tfield Enums.Quality Miracle
--  @tfield Enums.Quality Godly
--  @tfield Enums.Quality Special
Quality = {}

--- The type of a buff. Food buffs are lost when vomiting. Hex buffs can be
--  removed with Holy Light/Vanquish Hex, and can be resisted.
--  @enum BuffType
--  @tfield Enums.BuffType Buff
--  @tfield Enums.BuffType Hex
--  @tfield Enums.BuffType Food
BuffType = {}

--- The type of a map.
--  @enum mdata_t
--  @tfield Enums.mdata_t WorldMap
--  @tfield Enums.mdata_t Guild
--  @tfield Enums.mdata_t Town
--  @tfield Enums.mdata_t Field
--  @tfield Enums.mdata_t PlayerOwned
--  @tfield Enums.mdata_t Shelter
--  @tfield Enums.mdata_t Temporary
--  @tfield Enums.mdata_t Dungeon
--  @tfield Enums.mdata_t DungeonTower
--  @tfield Enums.mdata_t DungeonForest
--  @tfield Enums.mdata_t DungeonCastle
mdata_t = {}

--- Determines how the player should be spawned in a map when entering it for the
--  first time.
--  @enum MapEntranceTypeTable
--  @tfield Enums.MapEntranceTypeTable StairUp
--  @tfield Enums.MapEntranceTypeTable StairDown
--  @tfield Enums.MapEntranceTypeTable Custom
--  @tfield Enums.MapEntranceTypeTable Center
--  @tfield Enums.MapEntranceTypeTable Random
--  @tfield Enums.MapEntranceTypeTable WorldMapPos
--  @tfield Enums.MapEntranceTypeTable Specified
--  @tfield Enums.MapEntranceTypeTable South
MapEntranceTypeTable = {}

--- Indicates which map tile atlas to use for a map.
--  @enum MapTilesetTable
--  @tfield Enums.MapTilesetTable Normal
--  @tfield Enums.MapTilesetTable WorldMap
MapTilesetTable = {}

--- Possible genders of a character.
--  @enum GenderTable
--  @tfield Enums.GenderTable Random
--  @tfield Enums.GenderTable Male
--  @tfield Enums.GenderTable Female
GenderTable = {}

--- Relationship of a character to the player.
--  @enum RelationTable
--  @tfield Enums.RelationTable Aggressive
--  @tfield Enums.RelationTable Nonaggressive
--  @tfield Enums.RelationTable Unconcerned
--  @tfield Enums.RelationTable Neutral
--  @tfield Enums.RelationTable Friend
RelationTable = {}

--- A flag that can be set on a character. The first 32 flags (up to
--  <code>IsQuickTempered</code>) are "intrinsic" and will be reset
--  when the character is refreshed.
--  @see LuaCharacter.set_flag
--  @enum CharaFlagTable
--  @tfield Enums.CharaFlagTable IsFloating
--  @tfield Enums.CharaFlagTable IsInvisible
--  @tfield Enums.CharaFlagTable CanSeeInvisible
--  @tfield Enums.CharaFlagTable IsImmuneToConfusion
--  @tfield Enums.CharaFlagTable IsImmuneToBlindness
--  @tfield Enums.CharaFlagTable IsImmuneToFear
--  @tfield Enums.CharaFlagTable IsImmuneToSleep
--  @tfield Enums.CharaFlagTable IsImmuneToParalyzation
--  @tfield Enums.CharaFlagTable IsImmuneToPoison
--  @tfield Enums.CharaFlagTable CanDigestRottenFood
--  @tfield Enums.CharaFlagTable IsProtectedFromThieves
--  @tfield Enums.CharaFlagTable IsIncognito
--  @tfield Enums.CharaFlagTable DropsGold
--  @tfield Enums.CharaFlagTable Explodes
--  @tfield Enums.CharaFlagTable IsDeathMaster
--  @tfield Enums.CharaFlagTable CanCastRapidMagic
--  @tfield Enums.CharaFlagTable HasLayHand
--  @tfield Enums.CharaFlagTable IsSuitableForMount
--  @tfield Enums.CharaFlagTable Splits
--  @tfield Enums.CharaFlagTable HasCursedEquipments
--  @tfield Enums.CharaFlagTable IsUnsuitableForMount
--  @tfield Enums.CharaFlagTable IsImmuneToElementalDamage
--  @tfield Enums.CharaFlagTable Splits2
--  @tfield Enums.CharaFlagTable IsMetal
--  @tfield Enums.CharaFlagTable CuresBleedingQuickly
--  @tfield Enums.CharaFlagTable HasPowerBash
--  @tfield Enums.CharaFlagTable IsImmuneToMine
--  @tfield Enums.CharaFlagTable IsQuickTempered
--  @tfield Enums.CharaFlagTable IsLivestock
--  @tfield Enums.CharaFlagTable IsMarried
--  @tfield Enums.CharaFlagTable HasMadeGene
--  @tfield Enums.CharaFlagTable IsEscorted
--  @tfield Enums.CharaFlagTable IsTemporary
--  @tfield Enums.CharaFlagTable IsSilent
--  @tfield Enums.CharaFlagTable HasBeenUsedStethoscope
--  @tfield Enums.CharaFlagTable HasOwnSprite
--  @tfield Enums.CharaFlagTable IsLeashed
--  @tfield Enums.CharaFlagTable IsContracting
--  @tfield Enums.CharaFlagTable IsQuestTarget
--  @tfield Enums.CharaFlagTable IsEscortedInSubQuest
--  @tfield Enums.CharaFlagTable WillExplodeSoon
--  @tfield Enums.CharaFlagTable IsSentencedDaeth
--  @tfield Enums.CharaFlagTable IsLayHandAvailable
--  @tfield Enums.CharaFlagTable IsRidden
--  @tfield Enums.CharaFlagTable IsLordOfDungeon
--  @tfield Enums.CharaFlagTable HasOwnName
--  @tfield Enums.CharaFlagTable IsPregnant
--  @tfield Enums.CharaFlagTable DoesNotSearchEnemy
--  @tfield Enums.CharaFlagTable IsContractingWithReaper
--  @tfield Enums.CharaFlagTable NeedsRefreshingStatus
--  @tfield Enums.CharaFlagTable VisitedJustNow
--  @tfield Enums.CharaFlagTable BreaksIntoDebris
--  @tfield Enums.CharaFlagTable IsBestFriend
--  @tfield Enums.CharaFlagTable IsHungOnSandBag
--  @tfield Enums.CharaFlagTable HasAnorexia
--  @tfield Enums.CharaFlagTable WasPassedItemByYouJustNow
--  @tfield Enums.CharaFlagTable CuresMpFrequently
--  @tfield Enums.CharaFlagTable HasCustomTalk
--  @tfield Enums.CharaFlagTable HasLearnedWords
--  @tfield Enums.CharaFlagTable OnlyChristmas
CharaFlagTable = {}

--- The types of traits available.
--  @enum TraitTypeTable
--  @tfield Enums.TraitTypeTable Feat
--  @tfield Enums.TraitTypeTable Mutation
--  @tfield Enums.TraitTypeTable Nature
--  @tfield Enums.TraitTypeTable EtherDisease
TraitTypeTable = {}