--- Allows you to register new event callbacks when initializing mods.
-- @see core.event
-- @usage local Event = Elona.require("Event")
module "Event"

--- Registers a new event handler.
--- This function will insert a new callback hander for the given
--- event into the list of callback handlers for that event. Then,
--- when the event is fired, each callback in the list will be run in
--- the order in which they were registered. The callbacks will
--- receive a single table argument containing the event's parameters.
--- These parameters will differ between event types. Read the
--- documentation for the event you're handling to see the available
--- event arguments for it.
---
--- Optionally, a table of options can be passed. There are two
--- parameters supported. <code>priority</code> determines the order
--- in which the callback will run, with higher values being given
--- priority. The default is 1000. <code>instances</code> is a table
--- of objects that allow only running the event when certain instance
--- parameters are received by the event, like a specific character or
--- type. These parameters vary per event and not all events support
--- them.
---
--- A given callback can only be registered once per event/instance.
-- @tparam string event_id the event kind to register
-- @tparam function handler the handler for this event
-- @tparam[opt] {priority=num,instances=table} opts Event options.
-- @usage local GUI = Elona.require("GUI")
-- local Event = Elona.require("Event")
-- local function my_chara_moved_handler(chara)
--     GUI.txt("The character " .. chara.name .. " is about to move. ")
-- end
--
-- Event.register("core.character_moved", my_chara_moved_handler, { priority = 1000 })
function register(event_id, handler, opts) end

--- Unregisters an event handler that was previously registered with
--- <code>Event.register</code>. This has no effect if the handler was
--- not already registered.
-- @tparam string event_id the event kind to unregister
-- @tparam function handler the previously registered handler
function unregister(event_id, handler) end

--- Triggers an event from a Lua script. You can pass a table of
--- options containing an <code>instances</code> parameter to run
--- instanced events as well as the non-instanced version.
--- WARNING: This does not currently prevent infinite recursion!
-- @tparam string event the event to trigger
-- @tparam[opt] table data the event data
-- @tparam[opt] {instances=table} opts Event options
function trigger(event, data, opts) end
